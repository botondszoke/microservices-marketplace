version: '3.4'

services:
  productservice.api:
    image: ${DOCKER_REGISTRY-}productserviceapi
    container_name: ProductService.API
    networks:
      - web
      - backend
    build:
      context: .
      dockerfile: ProductService.API/Dockerfile
    depends_on:
      - mongodb_container_product

  mongodb_container_product:
    image: mongo:5.0
    container_name: product-db
    networks:
      - backend
    ports:
      - 27017:27017

  saleservice.api:
    image: ${DOCKER_REGISTRY-}saleserviceapi
    container_name: SaleService.API
    networks:
      - web
      - backend
    build:
      context: .
      dockerfile: SaleService.API/Dockerfile
    depends_on:
      - mongodb_container_sale
  
  mongodb_container_sale:
    image: mongo:5.0
    container_name: sale-db
    networks:
      - backend
    ports: 
      - 27018:27017
  
  traefik-gateway:
    image: traefik:v2.6
    container_name: traefik-gateway
    networks:
      - web
  
  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:2
    container_name: traefik-forward-auth
    environment:
      - DEFAULT_PROVIDER=oidc
      - SECRET=secretSECRET
      - PROVIDERS_OIDC_CLIENT_ID=buyte-backend
      - PROVIDERS_OIDC_CLIENT_SECRET=SSEGEb4is6W5hGlJvpDDKpTZtriVbIEA
      - PROVIDERS_OIDC_ISSUER_URL=http://keycloak.localhost/auth/realms/buyte
      - AUTH_HOST=auth.keycloak.localhost
      - COOKIE_DOMAIN=keycloak.localhost
      - INSECURE_COOKIE=true
      - LOG_LEVEL=debug
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.forwardauth.loadbalancer.server.port=4181"
      - "traefik.http.routers.forwardauth.entrypoints=web"
      - "traefik.http.routers.forwardauth.rule=Host(`auth.keycloak.localhost`) && PathPrefix(`/_oauth`)"
      - "traefik.http.routers.forwardauth.middlewares=traefik-forward-auth"
      
      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.address=http://traefik-forward-auth:4181"
      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders=X-Forwarded-User"
      - "traefik.http.middlewares.traefik-forward-auth.forwardauth.trustForwardHeader=true"
    networks:
      - web

  whoami:
    image: traefik/whoami
    container_name: whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.entrypoints=web"
      - "traefik.http.routers.whoami.rule=Host(`whoami.localhost`)"
      - "traefik.http.routers.whoami.middlewares=traefik-forward-auth"
    networks:
      - web

  keycloak:
    image: jboss/keycloak:16.1.1
    container_name: keycloak
    ports:
      - 8081:80
    command: ["-Djboss.http.port=80"]
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=K3ycloak4dmin
      - DB_VENDOR=postgres
      - DB_ADDR=auth-db
      - DB_DATABASE=postgres
      - DB_USER=postgres
      - DB_PASSWORD=P05tgre5pw
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_IMPORT=/tmp/realm-test.json
    volumes:
      - ./realm-export.json:/tmp/realm-test.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.entrypoints=web"
      - "traefik.http.routers.keycloak.rule=Host(`keycloak.localhost`)"

    networks:
      backend:
        aliases:
          - keycloak
      web:
        aliases:
          - keycloak.localhost
    depends_on:
      - postgres
  
  postgres:
    image: postgres:14.2
    container_name: auth-db
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=P05tgre5pw
    volumes:
      - postgres_vol:/var/lib/postgresql/data
    networks:
      - backend

  azure-emulator:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: azurite
    command: "azurite-blob --blobHost 0.0.0.0 --blobPort 10000"
    ports:
      - 10000:10000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.azure.rule=Host(`localhost`) && PathPrefix(`/devstoreaccount1`)"
      - "traefik.http.routers.azure.entrypoints=web"
      - "traefik.http.services.azure.loadbalancer.server.port=10000"
    networks:
      - backend
      - web
  
  rabbitmq-container:
    image: rabbitmq:3-management
    container_name: rabbitmq
    networks:
      - backend
    environment:
      - RABBITMQ_DEFAULT_USER=buyte
      - RABBITMQ_DEFAULT_PASS=Buyt3PW
  
  email-api:
    image: email-api
    container_name: email-api
    build:
      context: .
      dockerfile: EmailAPI/Dockerfile
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      - rabbitmq-container
    networks:
      - backend
  
  email-service:
    image: email-service
    container_name: email-service
    build:
      context: .
      dockerfile: EmailService/Dockerfile
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      - rabbitmq-container
    networks:
      - backend
    

networks:
  web:
    external: false
    name: web
  backend:
    external: false
    name: backend

volumes:
  postgres_vol:
    external: false
    name: postgres_vol

